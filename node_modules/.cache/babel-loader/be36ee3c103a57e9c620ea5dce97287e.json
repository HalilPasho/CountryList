{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/halil/Desktop/countries/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/halil/Desktop/countries/src/countriesList/countryDetail.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n {\\n    countries{\\n    name\\n    native\\n    emoji\\n    currency\\n    languages {\\n      code\\n      name\\n    }\\n  }\\n}\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport ApolloClient from 'apollo-boost';\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo'; // initialize a GraphQL client\n\nconst client = new ApolloClient({\n  uri: 'https://countries.trevorblades.com'\n}); // write a GraphQL query that asks for names and codes for all countries\n\nconst GET_COUNTRIES = gql(_templateObject()); // create a component that renders an API data-powered select input\n\nclass countryDetail extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      country: 'US'\n    };\n\n    this.onCountryChange = event => {\n      this.setState({\n        country: event.target.value\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(Query, {\n      query: GET_COUNTRIES,\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, ({\n      loading,\n      error,\n      data\n    }) => {\n      if (loading) return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Loading...\");\n      if (error) return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, error.message);\n      return React.createElement(\"select\", {\n        value: this.state.country,\n        onChange: this.onCountryChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, data.countries.map(country => (console.log(data), React.createElement(\"option\", {\n        key: country.code,\n        value: country.code,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, country.name, \" \", country.native, \" \", country.emoji))));\n    });\n  }\n\n}\n\nexport default countryDetail;","map":{"version":3,"sources":["/home/halil/Desktop/countries/src/countriesList/countryDetail.js"],"names":["ApolloClient","React","Component","ReactDOM","gql","Query","client","uri","GET_COUNTRIES","countryDetail","state","country","onCountryChange","event","setState","target","value","render","loading","error","data","message","countries","map","console","log","code","name","native","emoji"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,YAAP,MAAyB,cAAzB;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAAQC,KAAR,QAAoB,cAApB,C,CAEA;;AACA,MAAMC,MAAM,GAAG,IAAIN,YAAJ,CAAiB;AAC9BO,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf,C,CAIA;;AACA,MAAMC,aAAa,GAAGJ,GAAH,mBAAnB,C,CAeA;;AACA,MAAMK,aAAN,SAA4BP,SAA5B,CAAsC;AAAA;AAAA;AAAA,SACpCQ,KADoC,GAC5B;AACNC,MAAAA,OAAO,EAAE;AADH,KAD4B;;AAAA,SAMpCC,eANoC,GAMlBC,KAAK,IAAI;AACzB,WAAKC,QAAL,CAAc;AAACH,QAAAA,OAAO,EAAEE,KAAK,CAACE,MAAN,CAAaC;AAAvB,OAAd;AACD,KARmC;AAAA;;AAUpCC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAET,aAAd;AAA6B,MAAA,MAAM,EAAEF,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAAC;AAACY,MAAAA,OAAD;AAAUC,MAAAA,KAAV;AAAiBC,MAAAA;AAAjB,KAAD,KAA4B;AAC3B,UAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACb,UAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIA,KAAK,CAACE,OAAV,CAAP;AACX,aACE;AAAQ,QAAA,KAAK,EAAE,KAAKX,KAAL,CAAWC,OAA1B;AAAmC,QAAA,QAAQ,EAAE,KAAKC,eAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGQ,IAAI,CAACE,SAAL,CAAeC,GAAf,CAAmBZ,OAAO,KACvBa,OAAO,CAACC,GAAR,CAAYL,IAAZ,GACF;AAAQ,QAAA,GAAG,EAAET,OAAO,CAACe,IAArB;AAA2B,QAAA,KAAK,EAAEf,OAAO,CAACe,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGf,OAAO,CAACgB,IADX,OACkBhB,OAAO,CAACiB,MAD1B,OACmCjB,OAAO,CAACkB,KAD3C,CAFyB,CAA1B,CADH,CADF;AAUD,KAdH,CADF;AAkBD;;AA7BmC;;AAgCtC,eAAepB,aAAf","sourcesContent":["import ApolloClient from 'apollo-boost';\nimport React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport gql from 'graphql-tag';\nimport {Query} from 'react-apollo';\n\n// initialize a GraphQL client\nconst client = new ApolloClient({\n  uri: 'https://countries.trevorblades.com'\n});\n\n// write a GraphQL query that asks for names and codes for all countries\nconst GET_COUNTRIES = gql`\n {\n    countries{\n    name\n    native\n    emoji\n    currency\n    languages {\n      code\n      name\n    }\n  }\n}\n`;\n\n// create a component that renders an API data-powered select input\nclass countryDetail extends Component {\n  state = {\n    country: 'US'\n  };\n\n  // set the selected country to the new input value\n  onCountryChange = event => {\n    this.setState({country: event.target.value});\n  };\n\n  render() {\n    return (\n      <Query query={GET_COUNTRIES} client={client}>\n        {({loading, error, data}) => {\n          if (loading) return <p>Loading...</p>;\n          if (error) return <p>{error.message}</p>;\n          return (\n            <select value={this.state.country} onChange={this.onCountryChange}>\n              {data.countries.map(country => (\n                  console.log(data),\n                <option key={country.code} value={country.code}>\n                  {country.name} {country.native} {country.emoji}\n                </option>\n              ))}\n            </select>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default countryDetail;"]},"metadata":{},"sourceType":"module"}